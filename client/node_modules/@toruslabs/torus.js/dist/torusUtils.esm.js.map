{"version":3,"file":"torusUtils.esm.js","sources":["../src/loglevel.js","../src/some.js","../src/utils.js","../src/torus.js"],"sourcesContent":["import loglevel from 'loglevel'\n\nconst log = loglevel.getLogger('torus.js')\nlog.disableAll()\n\nexport default log\n","function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport class SomeError extends Error {\n  constructor({ errors, responses, predicate }) {\n    super('Unable to resolve enough promises.')\n    this.errors = errors\n    this.responses = responses\n    this.predicate = predicate\n  }\n}\n\nexport const Some = (promises, predicate) =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0\n    const sharedState = { resolved: false }\n    const errorArr = new Array(promises.length).fill(undefined)\n    const resultArr = new Array(promises.length).fill(undefined)\n    let predicateError\n    promises.forEach((x, index) => {\n      x.then((resp) => {\n        resultArr[index] = resp\n        return undefined\n      })\n        .catch((error) => {\n          errorArr[index] = error\n        })\n        .finally(() => {\n          if (sharedState.resolved) return\n          predicate(resultArr.slice(0), sharedState)\n            .then((data) => {\n              sharedState.resolved = true\n              resolve(data)\n              return undefined\n            })\n            .catch((error) => {\n              // log only the last predicate error\n              predicateError = error\n            })\n            .finally((_) => {\n              finishedCount += 1\n              if (finishedCount === promises.length) {\n                const errors = Object.values(\n                  resultArr.reduce((acc, z) => {\n                    const { id, error } = z || {}\n                    if (error?.data?.length > 0) {\n                      if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data)\n                      else acc[id] = error.data\n                    }\n                    return acc\n                  }, {})\n                )\n\n                if (errors.length > 0) {\n                  // Format-able errors\n                  const msg = errors.length > 1 ? `\\n${errors.map((it) => `â€¢ ${it}`).join('\\n')}` : errors[0]\n                  reject(new Error(msg))\n                } else {\n                  reject(\n                    new SomeError({\n                      errors: errorArr,\n                      responses: resultArr,\n                      predicate: predicateError?.message || predicateError,\n                    })\n                  )\n                }\n              }\n            })\n        })\n    })\n  })\n","import JsonStringify from 'json-stable-stringify'\n\nimport { generateJsonRPCObject, post } from './httpHelpers'\nimport log from './loglevel'\nimport { Some } from './some'\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s, k) => {\n  let set = s\n  if (typeof set === 'number') {\n    set = Array.from({ length: set }, (_, i) => i)\n  }\n  if (k > set.length || k <= 0) {\n    return []\n  }\n\n  if (k === set.length) {\n    return [set]\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [])\n  }\n\n  const combs = []\n  let tailCombs = []\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1)\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]])\n    }\n  }\n\n  return combs\n}\n\nexport const thresholdSame = (arr, t) => {\n  const hashMap = {}\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i])\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1\n    if (hashMap[str] === t) {\n      return arr[i]\n    }\n  }\n  return undefined\n}\n\nexport const keyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map((x) =>\n    post(\n      x,\n      generateJsonRPCObject('VerifierLookupRequest', {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error('lookup request failed', err))\n  )\n  return Some(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1)\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    )\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    )\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult })\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`))\n  })\n}\n\nexport const waitKeyLookup = (endpoints, verifier, verifierId, timeout) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject)\n    }, timeout)\n  })\n\nexport const keyAssign = async (endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId) => {\n  let nodeNum\n  let initialPoint\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length)\n    initialPoint = nodeNum\n  } else {\n    nodeNum = lastPoint % endpoints.length\n  }\n  if (nodeNum === firstPoint) throw new Error('Looped through all')\n  if (firstPoint !== undefined) initialPoint = firstPoint\n\n  const data = generateJsonRPCObject('KeyAssign', {\n    verifier,\n    verifier_id: verifierId.toString(),\n  })\n  try {\n    const signedData = await post(\n      'https://signer.tor.us/api/sign',\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n        },\n      },\n      { useAPIKey: true }\n    )\n    return post(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n        },\n      }\n    )\n  } catch (error) {\n    log.error(error)\n    return keyAssign(endpoints, torusNodePubs, nodeNum + 1, initialPoint, verifier, verifierId)\n  }\n}\n","import { decrypt, generatePrivate, getPublic } from '@toruslabs/eccrypto'\nimport { get, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers'\nimport BN from 'bn.js'\nimport { ec as EC } from 'elliptic'\nimport stringify from 'json-stable-stringify'\nimport memoryCache from 'memory-cache'\nimport { keccak256, toChecksumAddress } from 'web3-utils'\n\nimport { generateJsonRPCObject, post } from './httpHelpers'\nimport log from './loglevel'\nimport { Some } from './some'\nimport { GetOrSetNonceError, kCombinations, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from './utils'\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  constructor({\n    enableOneKey = false,\n    metadataHost = 'https://metadata.tor.us',\n    allowHost = 'https://signer.tor.us/api/allow',\n    serverTimeOffset = 0,\n  } = {}) {\n    this.ec = new EC('secp256k1')\n    this.metadataHost = metadataHost\n    this.allowHost = allowHost\n    this.metadataCache = memoryCache\n    this.metadataLock = {}\n    this.enableOneKey = enableOneKey\n    this.serverTimeOffset = serverTimeOffset || 0 // ms\n  }\n\n  static enableLogging(v = true) {\n    if (v) log.enableAll()\n    else log.disableAll()\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey)\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost)\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }) {\n    let torusKey\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16)\n    } else {\n      const privKey = new BN(privKeyHex, 16)\n      torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n)\n    }\n    const customKey = new BN(customKeyHex, 16)\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n)\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16))\n    await this.setMetadata(data)\n  }\n\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams = {}) {\n    const promiseArr = []\n    await get(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n        },\n      },\n      { useAPIKey: true }\n    )\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate()\n    const pubKey = getPublic(tmpKey).toString('hex')\n    const pubKeyX = pubKey.slice(2, 66)\n    const pubKeyY = pubKey.slice(66)\n    const tokenCommitment = keccak256(idToken)\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post(\n        endpoints[i],\n        generateJsonRPCObject('CommitmentRequest', {\n          messageprefix: 'mug00',\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => log.error('commitment', err))\n      promiseArr.push(p)\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== 'object') {\n          return false\n        }\n        if (x.error) {\n          return false\n        }\n        return true\n      })\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr)\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`))\n    }).then((responses) => {\n      const promiseArrRequest = []\n      const nodeSigs = []\n      for (let i = 0; i < responses.length; i += 1) {\n        if (responses[i]) nodeSigs.push(responses[i].result)\n      }\n      for (let i = 0; i < endpoints.length; i += 1) {\n        // eslint-disable-next-line promise/no-nesting\n        const p = post(\n          endpoints[i],\n          generateJsonRPCObject('ShareRequest', {\n            encrypted: 'yes',\n            item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n          })\n        ).catch((err) => log.error('share req', err))\n        promiseArrRequest.push(p)\n      }\n      return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n        /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n        // check if threshold number of nodes have returned the same user public key\n        const completedRequests = shareResponses.filter((x) => x)\n        const thresholdPublicKey = thresholdSame(\n          shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n          ~~(endpoints.length / 2) + 1\n        )\n        // optimistically run lagrange interpolation once threshold number of shares have been received\n        // this is matched against the user public key to ensure that shares are consistent\n        if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n          const sharePromises = []\n          const nodeIndex = []\n          for (let i = 0; i < shareResponses.length; i += 1) {\n            if (shareResponses[i] && shareResponses[i].result && shareResponses[i].result.keys && shareResponses[i].result.keys.length > 0) {\n              shareResponses[i].result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)))\n              if (shareResponses[i].result.keys[0].Metadata) {\n                const metadata = {\n                  ephemPublicKey: Buffer.from(shareResponses[i].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                  iv: Buffer.from(shareResponses[i].result.keys[0].Metadata.iv, 'hex'),\n                  mac: Buffer.from(shareResponses[i].result.keys[0].Metadata.mac, 'hex'),\n                  mode: Buffer.from(shareResponses[i].result.keys[0].Metadata.mode, 'hex'),\n                }\n                sharePromises.push(\n                  // eslint-disable-next-line promise/no-nesting\n                  decrypt(tmpKey, {\n                    ...metadata,\n                    ciphertext: Buffer.from(atob(shareResponses[i].result.keys[0].Share).padStart(64, '0'), 'hex'),\n                  }).catch((err) => log.debug('share decryption', err))\n                )\n              } else {\n                sharePromises.push(Promise.resolve(Buffer.from(shareResponses[i].result.keys[0].Share.padStart(64, '0'), 'hex')))\n              }\n            } else {\n              sharePromises.push(Promise.resolve(undefined))\n            }\n            nodeIndex.push(new BN(indexes[i], 16))\n          }\n          const sharesResolved = await Promise.all(sharePromises)\n          if (sharedState.resolved) return undefined\n\n          const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n            if (curr) acc.push({ index: nodeIndex[index], value: new BN(curr) })\n            return acc\n          }, [])\n          // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n          const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1)\n          let privateKey\n          for (let j = 0; j < allCombis.length; j += 1) {\n            const currentCombi = allCombis[j]\n            const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index))\n            const shares = currentCombiShares.map((x) => x.value)\n            const indices = currentCombiShares.map((x) => x.index)\n            const derivedPrivateKey = this.lagrangeInterpolation(shares, indices)\n            const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex')\n            const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n            const decryptedPubKeyY = decryptedPubKey.slice(66)\n            if (\n              new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n              new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n            ) {\n              privateKey = derivedPrivateKey\n              break\n            }\n          }\n          if (privateKey === undefined) {\n            throw new Error('could not derive private key')\n          }\n\n          let metadataNonce\n          if (this.enableOneKey) {\n            const { nonce } = await this.getNonce(thresholdPublicKey.X, thresholdPublicKey.Y, privateKey)\n            metadataNonce = new BN(nonce || '0', 16)\n          } else {\n            metadataNonce = await this.getMetadata({ pub_key_X: thresholdPublicKey.X, pub_key_Y: thresholdPublicKey.Y })\n          }\n          log.debug('> torus.js/retrieveShares', { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) })\n\n          if (sharedState.resolved) return undefined\n          privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n)\n\n          const ethAddress = this.generateAddressFromPrivKey(privateKey)\n          log.debug('> torus.js/retrieveShares', { ethAddress, privKey: privateKey.toString(16) })\n\n          // return reconstructed private key and ethereum address\n          return {\n            ethAddress,\n            privKey: privateKey.toString('hex', 64),\n            metadataNonce,\n          }\n        }\n        throw new Error('invalid')\n      })\n    })\n  }\n\n  async getMetadata(data, options) {\n    let unlock\n    try {\n      const dataKey = stringify(data)\n      if (this.metadataLock[dataKey] !== null) {\n        await this.metadataLock[dataKey]\n      } else {\n        this.metadataLock[dataKey] = new Promise((resolve) => {\n          unlock = () => {\n            this.metadataLock[dataKey] = null\n            resolve()\n          }\n        })\n      }\n      const cachedResult = this.metadataCache.get(dataKey)\n      if (cachedResult !== null) {\n        if (unlock) unlock()\n        return cachedResult\n      }\n      const metadataResponse = await post(`${this.metadataHost}/get`, data, options, { useAPIKey: true })\n      if (!metadataResponse || !metadataResponse.message) {\n        this.metadataCache.put(dataKey, new BN(0), 60000)\n        if (unlock) unlock()\n        return new BN(0)\n      }\n      this.metadataCache.put(dataKey, new BN(metadataResponse.message, 16), 60000)\n      return new BN(metadataResponse.message, 16) // nonce\n    } catch (error) {\n      log.error('get metadata error', error)\n      if (unlock) unlock()\n      return new BN(0)\n    }\n  }\n\n  generateMetadataParams(message, privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64))\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    }\n    const sig = key.sign(keccak256(stringify(setData)).slice(2))\n    return {\n      pub_key_X: key.getPublic().getX().toString('hex'),\n      pub_key_Y: key.getPublic().getY().toString('hex'),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64'),\n    }\n  }\n\n  async setMetadata(data, options) {\n    try {\n      this.metadataCache.del(stringify({ pub_key_X: data.pub_key_X, pub_key_Y: data.pub_key_Y }))\n      const metadataResponse = await post(`${this.metadataHost}/set`, data, options, { useAPIKey: true })\n      return metadataResponse.message // IPFS hash\n    } catch (error) {\n      log.error('set metadata error', error)\n      return ''\n    }\n  }\n\n  lagrangeInterpolation(shares, nodeIndex) {\n    if (shares.length !== nodeIndex.length) {\n      return null\n    }\n    let secret = new BN(0)\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1)\n      let lower = new BN(1)\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg())\n          upper = upper.umod(this.ec.curve.n)\n          let temp = nodeIndex[i].sub(nodeIndex[j])\n          temp = temp.umod(this.ec.curve.n)\n          lower = lower.mul(temp).umod(this.ec.curve.n)\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n)\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n)\n      secret = secret.add(delta)\n    }\n    return secret.umod(this.ec.curve.n)\n  }\n\n  generateAddressFromPrivKey(privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex')\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  generateAddressFromPubKey(publicKeyX, publicKeyY) {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString('hex', 64), y: publicKeyY.toString('hex', 64) })\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  async getPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, isExtended = false) {\n    log.debug('> torus.js/getPublicAddress', { endpoints, torusNodePubs, verifier, verifierId, isExtended })\n\n    let finalKeyResult\n    let isNewKey = false\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      await keyAssign(endpoints, torusNodePubs, undefined, undefined, verifier, verifierId)\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    log.debug('> torus.js/getPublicAddress', { finalKeyResult, isNewKey })\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      if (this.enableOneKey) {\n        let upgraded\n        try {\n          ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n          nonce = new BN(nonce || '0', 16)\n        } catch {\n          throw new GetOrSetNonceError()\n        }\n        if (typeOfUser === 'v1') {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n        } else if (typeOfUser === 'v2') {\n          if (upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X.toString(16), y: Y.toString(16) }).getPublic()\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n          }\n        } else {\n          throw new Error('getOrSetNonce should always return typeOfUser.')\n        }\n      } else {\n        typeOfUser = 'v1'\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y })\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      }\n\n      X = modifiedPubKey.getX().toString(16)\n      Y = modifiedPubKey.getY().toString(16)\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      log.debug('> torus.js/getPublicAddress', { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce })\n\n      if (!isExtended) return address\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError\n  }\n\n  async getOrSetNonce(X, Y, privKey, getOnly = false) {\n    let data\n    const msg = getOnly ? 'getNonce' : 'getOrSetNonce'\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey)\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      }\n    }\n    return post(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true })\n  }\n\n  async getNonce(X, Y, privKey) {\n    return this.getOrSetNonce(X, Y, privKey, true)\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey, nonce) {\n    const privKeyBN = new BN(privKey, 16)\n    const nonceBN = new BN(nonce, 16)\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex')\n  }\n}\n\nexport default Torus\n"],"names":["log","loglevel","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","errors","responses","predicate","Error","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","_","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","GetOrSetNonceError","kCombinations","s","k","set","from","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","JsonStringify","keyLookup","endpoints","verifier","verifierId","lookupPromises","post","generateJsonRPCObject","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","nodeNum","Math","floor","random","initialPoint","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","signedData","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","ec","EC","metadataCache","memoryCache","metadataLock","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","BN","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","indexes","verifierParams","idToken","extraParams","promiseArr","get","tmpKey","generatePrivate","pubKey","getPublic","tokenCommitment","keccak256","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","keys","PublicKey","sharePromises","nodeIndex","sort","a","b","Index","cmp","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","mode","decrypt","ciphertext","atob","Share","padStart","debug","all","sharesResolved","decryptedShares","curr","value","allCombis","currentCombi","currentCombiShares","v","includes","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","privateKey","getNonce","nonce","getMetadata","pub_key_X","pub_key_Y","add","ethAddress","generateAddressFromPrivKey","options","dataKey","unlock","cachedResult","metadataResponse","put","key","keyFromPrivate","setData","timestamp","Date","now","sig","sign","getX","getY","set_data","signature","r","del","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","ethAddressLower","toChecksumAddress","publicKeyX","publicKeyY","keyFromPublic","y","isExtended","isNewKey","assignResult","finalKeyResult","getOrSetNonce","typeOfUser","pubNonce","upgraded","modifiedPubKey","address","generateAddressFromPubKey","getOnly","privKeyBN","nonceBN","enableAll","apiKey","setAPIKey","embedHost","setEmbedHost"],"mappings":"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"}