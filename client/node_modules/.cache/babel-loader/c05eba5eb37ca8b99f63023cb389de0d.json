{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLinkProvider = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nconst EthereumChain_1 = require(\"../EthereumChain\");\n\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\"; // Indicates chain has been switched by switchEthereumChain or addEthereumChain request\n\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\n\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false; // true if mobile client has sent message to override jsonRpcUrl+chainId\n\n    this.isChainOverridden = false;\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.arbitraryRequest = this.arbitraryRequest.bind(this);\n    this.childRequestEthereumAccounts = this.childRequestEthereumAccounts.bind(this);\n    this._jsonRpcUrl = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    const chainId = this.getChainId();\n    const chainIdStr = util_1.prepend0x(chainId.toString(16)); // indicate that we've connected, for EIP-1193 compliance\n\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n\n    const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n\n    if (this._addresses.length > 0) {\n      this.initializeRelay();\n    }\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n\n  get chainId() {\n    return util_1.prepend0x(this.getChainId().toString(16));\n  }\n\n  get isWalletLink() {\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n\n\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n\n  get host() {\n    return this._jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  } // @ts-ignore\n\n\n  setProviderInfo(jsonRpcUrl, chainId) {\n    if (this.isChainOverridden) return;\n    this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n  }\n\n  updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n    const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n    if (hasChainSwitched && fromRelay) return;\n\n    if (fromRelay) {\n      this.isChainOverridden = true;\n    }\n\n    this._jsonRpcUrl = jsonRpcUrl; // emit chainChanged event if necessary\n\n    const originalChainId = this.getChainId();\n\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n\n    const chainChanged = util_1.ensureIntNumber(chainId) !== originalChainId;\n\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n\n  async switchEthereumChain(rpcUrl, chainId) {\n    if (util_1.ensureIntNumber(chainId) === this.getChainId()) {\n      return;\n    }\n\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10));\n\n    if (res.result === true) {\n      this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n\n      this.updateProviderInfo(rpcUrl, chainId, false);\n    }\n  }\n\n  setAppInfo(appName, appLogoUrl) {\n    this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n\n  async enable() {\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  close() {\n    this.initializeRelay().then(relay => relay.resetAndReload());\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n\n    const newParams = params === undefined ? [] : params; // WalletLink Requests\n\n    const id = this._relayEventManager.makeRequestId();\n\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async arbitraryRequest(data) {\n    const relay = await this.initializeRelay();\n    const res = await relay.arbitraryRequest(data);\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n    const relay = await this.initializeRelay();\n    await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n    return true;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`WalletLink does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    const newAddresses = addresses.map(address => util_1.ensureAddressString(address));\n\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n\n    this._addresses = newAddresses;\n    this.emit(\"accountsChanged\", this._addresses);\n\n    this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n        return this._wallet_addEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n        return this._wallet_switchEthereumChain(params);\n    }\n\n    if (!this._jsonRpcUrl) throw Error(\"Error: No jsonRpcUrl provided\");\n    return window.fetch(this._jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n      }\n\n      const response = json;\n      const {\n        error\n      } = response;\n\n      if (error) {\n        throw eth_rpc_errors_1.serializeError(error);\n      }\n\n      return response;\n    });\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const address = util_1.ensureAddressString(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? util_1.ensureAddressString(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n    const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? util_1.ensureBN(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? util_1.ensureBN(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n    const chainId = this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return this._addresses;\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n\n  _eth_chainId() {\n    return util_1.hexStringFromIntNumber(this.getChainId());\n  }\n\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n    const chainId = parseInt(chainIdStr, 10);\n    return util_1.ensureIntNumber(chainId);\n  }\n\n  async _eth_requestAccounts() {\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts();\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const message = util_1.ensureBuffer(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = util_1.ensureBuffer(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = util_1.ensureBuffer(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId());\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = util_1.ensureParsedJSONObject(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = util_1.ensureParsedJSONObject(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  async _wallet_addEthereumChain(params) {\n    const request = params[0];\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n\n    if (ethereumChain === undefined) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        error: {\n          code: 2,\n          message: `chainId ${request.chainId} not supported`\n        }\n      };\n    }\n\n    const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain); // @ts-ignore\n\n    await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: null\n    };\n  }\n\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n\n    if (ethereumChain === undefined) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        error: {\n          code: 2,\n          message: `chainId ${request.chainId} not supported`\n        }\n      };\n    }\n\n    const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain); // @ts-ignore\n\n    await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: null\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback(accounts => this._setAddresses(accounts));\n      relay.setChainIdCallback(chainId => {\n        this.updateProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10), true);\n      });\n      relay.setJsonRpcUrlCallback(jsonRpcUrl => {\n        this.updateProviderInfo(jsonRpcUrl, this.getChainId(), true);\n      });\n      this._relay = relay;\n      return relay;\n    });\n  }\n\n}\n\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"sources":["/home/mark/repo/tailwind-deez/client/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WalletLinkProvider","bn_js_1","require","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","eth_rpc_errors_1","safe_event_emitter_1","SubscriptionManager_1","EthereumChain_1","LOCAL_STORAGE_ADDRESSES_KEY","DEFAULT_CHAIN_ID_KEY","HAS_CHAIN_BEEN_SWITCHED_KEY","default","constructor","options","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","isChainOverridden","_send","send","_sendAsync","sendAsync","setProviderInfo","bind","updateProviderInfo","getChainId","setAppInfo","enable","close","request","_setAddresses","scanQRCode","arbitraryRequest","childRequestEthereumAccounts","_jsonRpcUrl","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","chainId","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","addresses","split","events","on","notification","type","method","data","params","length","initializeRelay","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","fromRelay","hasChainSwitched","originalChainId","setItem","chainChanged","ensureIntNumber","switchEthereumChain","rpcUrl","relay","res","result","appName","appLogoUrl","then","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","id","_sendRequestAsync","callback","requests","map","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","ethErrors","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","childSessionId","childSessionSecret","dappName","dappLogoURL","dappURL","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","newAddresses","address","ensureAddressString","JSON","stringify","join","window","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","wallet_addEthereumChain","_wallet_addEthereumChain","wallet_switchEthereumChain","_wallet_switchEthereumChain","fetch","body","mode","headers","json","parse","error","serializeError","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","includes","_a","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","provider","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","requestEthereumAccounts","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","chainIdNumber","ethereumChain","EthereumChain","fromChainId","BigInt","code","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","accounts","setChainIdCallback","setJsonRpcUrlCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletLinkProvider = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst EthereumChain_1 = require(\"../EthereumChain\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\n// Indicates chain has been switched by switchEthereumChain or addEthereumChain request\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        // true if mobile client has sent message to override jsonRpcUrl+chainId\n        this.isChainOverridden = false;\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.arbitraryRequest = this.arbitraryRequest.bind(this);\n        this.childRequestEthereumAccounts = this.childRequestEthereumAccounts.bind(this);\n        this._jsonRpcUrl = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        const chainId = this.getChainId();\n        const chainIdStr = util_1.prepend0x(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params\n            });\n        });\n        if (this._addresses.length > 0) {\n            this.initializeRelay();\n        }\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    get chainId() {\n        return util_1.prepend0x(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this._jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    // @ts-ignore\n    setProviderInfo(jsonRpcUrl, chainId) {\n        if (this.isChainOverridden)\n            return;\n        this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n    }\n    updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n        const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n        if (hasChainSwitched && fromRelay)\n            return;\n        if (fromRelay) {\n            this.isChainOverridden = true;\n        }\n        this._jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = util_1.ensureIntNumber(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async switchEthereumChain(rpcUrl, chainId) {\n        if (util_1.ensureIntNumber(chainId) === this.getChainId()) {\n            return;\n        }\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10));\n        if (res.result === true) {\n            this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n            this.updateProviderInfo(rpcUrl, chainId, false);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this.initializeRelay().then(relay => relay.resetAndReload());\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // WalletLink Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode(util_1.ensureRegExpString(match));\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const relay = await this.initializeRelay();\n        const res = await relay.arbitraryRequest(data);\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL) {\n        const relay = await this.initializeRelay();\n        await relay.childRequestEthereumAccounts(childSessionId, childSessionSecret, dappName, dappLogoURL, dappURL);\n        return true;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        const newAddresses = addresses.map(address => util_1.ensureAddressString(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n                return this._wallet_addEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n                return this._wallet_switchEthereumChain(params);\n        }\n        if (!this._jsonRpcUrl)\n            throw Error(\"Error: No jsonRpcUrl provided\");\n        return window\n            .fetch(this._jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw eth_rpc_errors_1.serializeError(error);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = util_1.ensureAddressString(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? util_1.ensureAddressString(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n        const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? util_1.ensureBN(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? util_1.ensureBN(tx.maxPriorityFeePerGas) : null;\n        const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n        const chainId = this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return util_1.hexStringFromIntNumber(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n        const chainId = parseInt(chainIdStr, 10);\n        return util_1.ensureIntNumber(chainId);\n    }\n    async _eth_requestAccounts() {\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts();\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const message = util_1.ensureBuffer(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = util_1.ensureBuffer(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = util_1.ensureBuffer(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId());\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = util_1.ensureParsedJSONObject(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = util_1.ensureParsedJSONObject(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        const request = (params[0]);\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n        if (ethereumChain === undefined) {\n            return { jsonrpc: '2.0', id: 0, error: { code: 2, message: `chainId ${request.chainId} not supported` } };\n        }\n        const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain);\n        // @ts-ignore\n        await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n        return { jsonrpc: '2.0', id: 0, result: null };\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = (params[0]);\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n        if (ethereumChain === undefined) {\n            return { jsonrpc: '2.0', id: 0, error: { code: 2, message: `chainId ${request.chainId} not supported` } };\n        }\n        const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain);\n        // @ts-ignore\n        await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n        return { jsonrpc: \"2.0\", id: 0, result: null };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setAccountsCallback((accounts) => this._setAddresses(accounts));\n            relay.setChainIdCallback((chainId) => {\n                this.updateProviderInfo(this._jsonRpcUrl, parseInt(chainId, 10), true);\n            });\n            relay.setJsonRpcUrlCallback((jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, this.getChainId(), true);\n            });\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"]},"metadata":{},"sourceType":"script"}